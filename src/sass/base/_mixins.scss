///////////////////
// Media Queries //
///////////////////
@mixin mq-min($min) {
	@media screen and (min-width: ($min/16) + em) {
		@content;
	}
}
@mixin mq-max($max) {
	@media screen and (max-width: (($max - 1)/16) + em) {
		@content;
	}
}
@mixin mq-min-max($min, $max) {
	@media screen and (min-width: ($min/16) + em) and (max-width: (($max - 1)/16) + em) {
		@content;
	}
}

@mixin mq-retina {
	@media
	 only screen and (-webkit-min-device-pixel-ratio: 2),
	 only screen and ( min-device-pixel-ratio: 2),
	 only screen and ( min-resolution: 192dpi),
	 only screen and ( min-resolution: 2dppx) {
		@content;
	}
}
@mixin mq-min-retina($min) {
	@media
	 only screen and (min-width: ($min/16) + em) and (-webkit-min-device-pixel-ratio: 2),
	 only screen and (min-width: ($min/16) + em) and ( min-device-pixel-ratio: 2),
	 only screen and (min-width: ($min/16) + em) and ( min-resolution: 192dpi),
	 only screen and (min-width: ($min/16) + em) and ( min-resolution: 2dppx) {
		@content;
	}
}
@mixin mq-max-retina($max) {
	@media
	 only screen and (max-width: (($max - 1)/16) + em) and (-webkit-min-device-pixel-ratio: 2),
	 only screen and (max-width: (($max - 1)/16) + em) and ( min-device-pixel-ratio: 2),
	 only screen and (max-width: (($max - 1)/16) + em) and ( min-resolution: 192dpi),
	 only screen and (max-width: (($max - 1)/16) + em) and ( min-resolution: 2dppx) {
		@content;
	}
}
@mixin mq-min-max-retina($min, $max) {
	@media
	 only screen and (min-width: ($min/16) + em) and (max-width: (($max - 1)/16) + em) and (-webkit-min-device-pixel-ratio: 2),
	 only screen and (min-width: ($min/16) + em) and (max-width: (($max - 1)/16) + em) and ( min-device-pixel-ratio: 2),
	 only screen and (min-width: ($min/16) + em) and (max-width: (($max - 1)/16) + em) and ( min-resolution: 192dpi),
	 only screen and (min-width: ($min/16) + em) and (max-width: (($max - 1)/16) + em) and ( min-resolution: 2dppx) {
		@content;
	}
}

@mixin mq-landscape {
	@media (orientation: landscape) {
		@content;
	}
}
@mixin mq-min-landscape($min) {
	@media screen and (min-width: ($min/16) + em) and (orientation: landscape) {
		@content;
	}
}
@mixin mq-max-landscape($max) {
	@media screen and (max-width: (($max - 1)/16) + em) and (orientation: landscape) {
		@content;
	}
}
@mixin mq-min-max-landscape($min, $max) {
	@media screen and (min-width: ($min/16) + em) and (max-width: (($max - 1)/16) + em) and (orientation: landscape) {
		@content;
	}
}

@mixin mq-portrait {
	@media (orientation: portrait) {
		@content;
	}
}
@mixin mq-min-portrait($min) {
	@media screen and (min-width: ($min/16) + em) and (orientation: portrait) {
		@content;
	}
}
@mixin mq-max-portrait($max) {
	@media screen and (max-width: (($max - 1)/16) + em) and (orientation: portrait) {
		@content;
	}
}
@mixin mq-min-max-portrait($min, $max) {
	@media screen and (min-width: ($min/16) + em) and (max-width: (($max - 1)/16) + em) and (orientation: portrait) {
		@content;
	}
}

// mq in use:
// @include mq-max(980) {}
// @include mq-min(980) {}
// @include mq-min(1100) {}
// @include mq-min(1440) {}


/////////////////////////
// Non user selectable //
/////////////////////////
@mixin user-select-none { 
	-webkit-user-select: none; 
	-moz-user-select: none; 
	-ms-user-select: none;
	user-select: none;
}

///////////////////////////////////////////
// top: x; right: x; bottom: x; left: x; //
///////////////////////////////////////////
@mixin trbl($val) { 
	top: $val;
	right: $val;
	bottom: $val;
	left: $val;
}

///////////////
// Transform //
///////////////
@mixin transform($val){
	-ms-transform: $val;
	-webkit-transform: $val;
	transform: $val;
}

//////////////////////
// Transform origin //
//////////////////////
@mixin transform-origin($val){
    -ms-transform-origin: $val;
    -webkit-transform-origin: $val;
    transform-origin: $val;
}

/////////////////
// Transitions //
/////////////////
@function prefix($property, $prefixes: (webkit moz o ms)){
	// You can change $vendor-prefixed-properties var inside 
	// @function prefix to set the CSS properties you want to vendor-prefix.
	
	$vendor-prefixed-properties: transform background-clip background-size;
	$result: ();
	@each $prefix in $prefixes {
	   @if index($vendor-prefixed-properties, $property){
		 $property: -#{$prefix}-#{$property}
	   }
	   $result: append($result, $property);
	}
	@return $result;
}

@function trans-prefix($transition, $prefix: moz){
	$prefixed: ();
	@each $trans in $transition {
		$prop-name: nth($trans, 1);
		$vendor-prop-name: prefix($prop-name, $prefix);
		$prop-vals: nth($trans, 2);
		$prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
	}
	
	@return $prefixed;
}

@mixin transition($values...){
	@if (nth($values, 1) == 'none'){
		// -o-transition: none;
		// -moz-transition: none;
		-webkit-transition: none;
		transition: none;
	}
	@else {
		$transitions: ();
		@each $declaration in $values {
			$prop: nth($declaration, 1);
			$prop-opts: ();
			$length: length($declaration);
			@for $i from 2 through $length {
				$prop-opts: append($prop-opts, nth($declaration, $i));   
			}
			$trans: ($prop, $prop-opts);
			$transitions: append($transitions, $trans, comma);
		}
		  
		// -o-transition: trans-prefix($transitions, o);
		// -moz-transition: trans-prefix($transitions, moz);
		-webkit-transition: trans-prefix($transitions, webkit);
		transition: $values;
	}
}

////////////////////////////////////////////////
// Linear gradient (modified from bourbon.io) //
////////////////////////////////////////////////

// USAGE EXAMPLES:
// @include background-linear-gradient(#1e5799, #2989d8);
// @include background-linear-gradient(to top, #8fdce5, #3dc3d1);
// @include background-linear-gradient(to top, #8fdce5, #3dc3d1, $fallback: red);
// @include background-linear-gradient(160deg, #8fdce5 0%, #8fdce5 60%, #3dc3d1 60%, #3dc3d1 100%);
@mixin background-linear-gradient($pos, $g1, $g2: null,
					   $g3: null, $g4: null,
					   $g5: null, $g6: null,
					   $g7: null, $g8: null,
					   $g9: null, $g10: null,
					   $fallback: null){
	$gradients: _linear-gradient($pos, $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10, $fallback);
	background: nth($gradients, 1); // fallback color
	background: nth($gradients, 2); // -webkit gradient
	background: nth($gradients, 3); // standard gradient
}

@function _linear-gradient($pos, $g1, $g2: null,
					   $g3: null, $g4: null,
					   $g5: null, $g6: null,
					   $g7: null, $g8: null,
					   $g9: null, $g10: null,
					   $fallback: null){
	// Detect what type of value exists in $pos
	$pos-type: type-of(nth($pos, 1));
	$pos-spec: null;
	$pos-degree: null;

	// If $pos is missing from mixin, reassign vars and add default position
	@if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
		$g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;
		$g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;
		$pos: null;
	}

	@if $pos {
		$positions: _linear-positions-parser($pos);
		$pos-degree: nth($positions, 1);
		$pos-spec:   nth($positions, 2);
	}

	$full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;

	// Set $g1 as the default fallback color
	$fallback-color: nth($g1, 1);

	// If $fallback is a color use that color as the fallback color
	@if (type-of($fallback) == color) or ($fallback == "transparent"){
		$fallback-color: $fallback;
	}

	// background-color: $fallback-color;
	// background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome
	// background-image: unquote("linear-gradient(#{$pos-spec}#{$full})");

	$gradient-webkit: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome
	$gradient: unquote("linear-gradient(#{$pos-spec}#{$full})");
	@return $fallback-color $gradient-webkit $gradient;
}

@function _linear-positions-parser($pos){
  $type: type-of(nth($pos, 1));
  $spec: null;
  $degree: null;
  $side: null;
  $corner: null;
  $length: length($pos);

  // Parse Side and corner positions
  @if ($length > 1){
	@if nth($pos, 1) == "to" { // Newer syntax
	  $side: nth($pos, 2);

	  @if $length == 2 { // eg. to top
		// Swap for backwards compatability
		$degree: _position-flipper(nth($pos, 2));
	  }
	  @else if $length == 3 { // eg. to top left
		$corner: nth($pos, 3);
	  }
	}
	@else if $length == 2 { // Older syntax ("top left")
	  $side: _position-flipper(nth($pos, 1));
	  $corner: _position-flipper(nth($pos, 2));
	}

	@if ("#{$side} #{$corner}" == "left top") or ("#{$side} #{$corner}" == "top left"){
	  $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
	}
	@else if ("#{$side} #{$corner}" == "right top") or ("#{$side} #{$corner}" == "top right"){
	  $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
	}
	@else if ("#{$side} #{$corner}" == "right bottom") or ("#{$side} #{$corner}" == "bottom right"){
	  $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
	}
	@else if ("#{$side} #{$corner}" == "left bottom") or ("#{$side} #{$corner}" == "bottom left"){
	  $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
	}
	$spec: to $side $corner;
  }
  @else if $length == 1 {
	// Swap for backwards compatability
	@if $type == string {
	  $degree: $pos;
	  $spec: to _position-flipper($pos);
	}
	@else {
	  $degree: -270 - $pos; //rotate the gradient opposite from spec
	  $spec: $pos;
	}
  }
  $degree: unquote($degree + ",");
  $spec:   unquote($spec + ",");
  @return $degree $spec;
}

@function _position-flipper($pos){
  @return if($pos == left, right, null)
		 if($pos == right, left, null)
		 if($pos == top, bottom, null)
		 if($pos == bottom, top, null);
}

/////////////
// FLEXBOX //
/////////////
@mixin flexbox(){
	display: -webkit-flex;
	display: flex;
}
@mixin inline-flex(){
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: inline-flex;
}
@mixin flex-direction($val){    
	-webkit-flex-direction: $val;
	flex-direction: $val;
}
@mixin flex-wrap($val){
	-webkit-flex-wrap: $val;
	flex-wrap: $val;
}
@mixin flex-flow($val){
	-webkit-flex-flow: $val;
	flex-flow: $val;
}
@mixin flex($val){
	-webkit-flex: $val;
	flex: $val;
}
@mixin flex-shrink($val){
	-webkit-flex-shrink: $val;
	flex-shrink: $val;
}
@mixin align-items($val){
	-webkit-align-items: $val;
	align-items: $val;
}
@mixin align-content($val){
	-webkit-align-content: $val;
	align-content: $val;
}
@mixin align-self($val){
	-webkit-align-self: $val;
	align-self: $val;
}
@mixin justify-content($val){
	-webkit-justify-content: $val;
	justify-content: $val;
}
@mixin order($val){
	-webkit-order: $val;
	order: $val;
}

/////////////
// COLUMNS //
/////////////
@mixin column-count($column-count: 0) {
	-moz-column-count: $column-count;
	-webkit-column-count: $column-count;
	column-count: $column-count;
}

@mixin column-gap($column-gap: 0) {
	-moz-column-gap: $column-gap;
	-webkit-column-gap: $column-gap;
	column-gap: $column-gap;
}

@mixin columns($column-count: 0, $column-gap: 0) {
	@include column-count($column-count);
	@include column-gap($column-gap);
}

/////////////////////////
// ANIMATION KEYFRAMES //
/////////////////////////
@mixin keyframes($name) {
	// @-moz-keyframes #{$name} {
	// 	@content;
	// }

	@-webkit-keyframes #{$name} {
		@content;
	}

	@keyframes #{$name} {
		@content;
	}
}

/////////////////
// PLACEHOLDER //
/////////////////
@mixin placeholder() {
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
	&::-webkit-input-placeholder {
		@content;
	}
	// &::placeholder {
	// 	@content;
	// }
}

@mixin clearfix() {
	&::after {
		content: '';
		display: table;
		clear: both;
	}
}

///////////////////////////
// BOX SIZING BORDER BOX //
///////////////////////////
@mixin box-sizing-border-box { 
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

///////////////////////////
// TEXT SIZE ADJUST NONE //
///////////////////////////
@mixin text-size-adjust-none { 
	-webkit-text-size-adjust: none;
	-moz-text-size-adjust: none;
	-ms-text-size-adjust: none;
}